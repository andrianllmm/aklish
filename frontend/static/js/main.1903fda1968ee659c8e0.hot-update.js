/*! For license information please see main.1903fda1968ee659c8e0.hot-update.js.LICENSE.txt */
"use strict";self.webpackHotUpdatefrontend("main",{"./src/components/Games/Wordle/Wordle.js":(e,t,n)=>{n.r(t),n.d(t,{default:()=>d});var r=n("./node_modules/react/index.js"),s=n.n(r),a=n("./node_modules/react-router/dist/index.js"),o=n("./src/components/Header.js"),l=n("./src/components/Games/Keyboard.js"),c=n("./src/components/Games/Message.js"),i=n("./src/components/Games/Wordle/Endgame.js"),u=n("./src/components/Games/Wordle/Grid.js");function d(){const e=[4,6],[t,n]=s().useState((0,a.useParams)().lang),[r,d]=s().useState(""),[m,f]=s().useState(""),[h,w]=s().useState(""),[g,E]=s().useState(0),[y,p]=s().useState([...Array(6)]),[v,k]=s().useState([]),[j,S]=s().useState(!1),[G,L]=s().useState(null),[$,b]=s().useState(!1);function x({key:e}){if("Enter"===e){if(v.includes(h))return void L(["you already tried that word","warning"]);if(h.length!==r.length)return void L([`word must be ${r.length} characters long`,"warning"]);fetch(`/dictionary/api/${t}/entry/?word=${h}`).then((e=>{if(!e.ok)throw new Error("Response was not ok");var t;t=function(){let e=[...r],t=[...h].map((e=>({key:e,status:"absent"})));return t.forEach(((n,r)=>{e[r]===n.key&&(t[r].status="correct",e[r]=null)})),t.forEach(((n,r)=>{e.includes(n.key)&&"correct"!==n.status&&(t[r].status="misplaced",e[e.indexOf(n.key)]=null)})),t}(),h===r&&S(!0),p((e=>{let n=[...e];return n[g]=t,n})),k((e=>[...e,h])),E((e=>e+1)),w("")})).catch((e=>{L([`${h} is not in the dictionary`,"warning"])}))}else"Backspace"===e?h.length>0&&w((e=>e.slice(0,-1))):/^[A-Za-z-']$/.test(e)&&h.length<r.length&&w((t=>t.toLowerCase()+e.toLowerCase()))}return s().useEffect((()=>{fetch(`/dictionary/api/${t}/entry/?word_len=${e[0]}-${e[1]}&definition_len=3-20&word_case=lower&definition!^=(&classification!=vul&origin!=eng&`).then((e=>e.json())).then((e=>{d(e.word.toLowerCase());const t=e.attributes,n=t[Math.floor(Math.random()*t.length)].definition;f(n)})).catch((e=>{L(["Too many retries. Try again later.","warning"]),console.error("Error fetching data: ",e)}))}),[]),s().useEffect((()=>(window.addEventListener("keyup",x),j&&(b(!0),window.removeEventListener("keyup",x)),g>=6&&(b(!0),window.removeEventListener("keyup",x)),()=>{window.removeEventListener("keyup",x)})),[x]),s().useEffect((()=>{if(G){const e=setTimeout((()=>{L(null)}),1500);return()=>clearTimeout(e)}}),[G]),s().createElement(s().Fragment,null,r&&s().createElement(s().Fragment,null,s().createElement(o.default,{title:"Wordle"}),s().createElement("div",{className:"text-center"},s().createElement("div",null,s().createElement("p",{className:"m-2"},"Hint: ",s().createElement("strong",null,m))),G&&s().createElement("div",{className:"d-flex justify-content-center"},s().createElement(c.default,{message:G[0],variant:G[1]})),s().createElement(u.default,{solutionLen:r.length,currentGuess:h,guesses:y,turn:g}),s().createElement(l.default,{handleKeyup:x}),$&&s().createElement(i.default,{show:$,isCorrect:j,solution:r,turn:g,numGuesses:6}))))}}},(function(e){e.h=()=>"e07567ca96066de8f616"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,